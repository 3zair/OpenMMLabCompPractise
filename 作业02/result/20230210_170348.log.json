{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Build cuda_11.1.TC455_06.29069683_0\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.4.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.22.0+", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=24, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'mask_rcnn_r50_fpn_mstrain-poly_3x_coco_20210524_201154-21b550bb.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 800)],\n        multiscale_mode='range',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='RepeatDataset',\n        times=3,\n        dataset=dict(\n            type='CocoDataset',\n            ann_file='dataset/balloon/train/coco_train_ann.json',\n            img_prefix='dataset/balloon/train',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(\n                    type='LoadAnnotations',\n                    with_bbox=True,\n                    with_mask=True,\n                    poly2mask=False),\n                dict(\n                    type='Resize',\n                    img_scale=[(1333, 640), (1333, 800)],\n                    multiscale_mode='range',\n                    keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(\n                    type='Collect',\n                    keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n            ],\n            classes=('balloon', ))),\n    val=dict(\n        type='CocoDataset',\n        ann_file='dataset/balloon/val/coco_val_ann.json',\n        img_prefix='dataset/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='dataset/balloon/val/coco_val_ann.json',\n        img_prefix='dataset/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(interval=1, metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[9, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=8)\nmodel = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='resnet50-0676ba61.pth')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nwork_dir = 'work/balloon_mask_rcnn50'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 545555389, "exp_name": "mask_rcnn_r50_test_coco.py"}
{"mode": "train", "epoch": 1, "iter": 24, "lr": 0.00094, "memory": 11953, "data_time": 0.12103, "loss_rpn_cls": 0.0516, "loss_rpn_bbox": 0.01683, "loss_cls": 0.3986, "acc": 84.7168, "loss_bbox": 0.3228, "loss_mask": 1.73813, "loss": 2.52796, "time": 0.82622}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00094, "bbox_mAP": 0.272, "bbox_mAP_50": 0.432, "bbox_mAP_75": 0.308, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.238, "bbox_mAP_l": 0.332, "bbox_mAP_copypaste": "0.272 0.432 0.308 0.000 0.238 0.332", "segm_mAP": 0.344, "segm_mAP_50": 0.432, "segm_mAP_75": 0.43, "segm_mAP_s": 0.0, "segm_mAP_m": 0.122, "segm_mAP_l": 0.531, "segm_mAP_copypaste": "0.344 0.432 0.430 0.000 0.122 0.531"}
{"mode": "train", "epoch": 2, "iter": 24, "lr": 0.0019, "memory": 12424, "data_time": 0.11408, "loss_rpn_cls": 0.02463, "loss_rpn_bbox": 0.01521, "loss_cls": 0.19809, "acc": 89.6637, "loss_bbox": 0.39066, "loss_mask": 0.14725, "loss": 0.77584, "time": 0.80702}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.0019, "bbox_mAP": 0.606, "bbox_mAP_50": 0.838, "bbox_mAP_75": 0.79, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.531, "bbox_mAP_l": 0.671, "bbox_mAP_copypaste": "0.606 0.838 0.790 0.000 0.531 0.671", "segm_mAP": 0.735, "segm_mAP_50": 0.83, "segm_mAP_75": 0.83, "segm_mAP_s": 0.0, "segm_mAP_m": 0.724, "segm_mAP_l": 0.782, "segm_mAP_copypaste": "0.735 0.830 0.830 0.000 0.724 0.782"}
{"mode": "train", "epoch": 3, "iter": 24, "lr": 0.00286, "memory": 12424, "data_time": 0.11503, "loss_rpn_cls": 0.01119, "loss_rpn_bbox": 0.01115, "loss_cls": 0.09937, "acc": 96.36027, "loss_bbox": 0.24636, "loss_mask": 0.11295, "loss": 0.48102, "time": 0.82641}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00286, "bbox_mAP": 0.664, "bbox_mAP_50": 0.888, "bbox_mAP_75": 0.811, "bbox_mAP_s": 0.177, "bbox_mAP_m": 0.618, "bbox_mAP_l": 0.712, "bbox_mAP_copypaste": "0.664 0.888 0.811 0.177 0.618 0.712", "segm_mAP": 0.769, "segm_mAP_50": 0.876, "segm_mAP_75": 0.876, "segm_mAP_s": 0.058, "segm_mAP_m": 0.731, "segm_mAP_l": 0.813, "segm_mAP_copypaste": "0.769 0.876 0.876 0.058 0.731 0.813"}
{"mode": "train", "epoch": 4, "iter": 24, "lr": 0.00382, "memory": 12424, "data_time": 0.1143, "loss_rpn_cls": 0.00673, "loss_rpn_bbox": 0.01013, "loss_cls": 0.0707, "acc": 97.30937, "loss_bbox": 0.1066, "loss_mask": 0.09336, "loss": 0.28752, "time": 0.81502}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00382, "bbox_mAP": 0.781, "bbox_mAP_50": 0.9, "bbox_mAP_75": 0.9, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.761, "bbox_mAP_l": 0.825, "bbox_mAP_copypaste": "0.781 0.900 0.900 0.404 0.761 0.825", "segm_mAP": 0.812, "segm_mAP_50": 0.9, "segm_mAP_75": 0.883, "segm_mAP_s": 0.101, "segm_mAP_m": 0.74, "segm_mAP_l": 0.867, "segm_mAP_copypaste": "0.812 0.900 0.883 0.101 0.740 0.867"}
{"mode": "train", "epoch": 5, "iter": 24, "lr": 0.00478, "memory": 12424, "data_time": 0.11853, "loss_rpn_cls": 0.00374, "loss_rpn_bbox": 0.00808, "loss_cls": 0.05273, "acc": 98.01636, "loss_bbox": 0.07667, "loss_mask": 0.07912, "loss": 0.22035, "time": 0.82449}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00478, "bbox_mAP": 0.779, "bbox_mAP_50": 0.905, "bbox_mAP_75": 0.873, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.758, "bbox_mAP_l": 0.823, "bbox_mAP_copypaste": "0.779 0.905 0.873 0.404 0.758 0.823", "segm_mAP": 0.822, "segm_mAP_50": 0.891, "segm_mAP_75": 0.891, "segm_mAP_s": 0.219, "segm_mAP_m": 0.758, "segm_mAP_l": 0.873, "segm_mAP_copypaste": "0.822 0.891 0.891 0.219 0.758 0.873"}
{"mode": "train", "epoch": 6, "iter": 24, "lr": 0.00573, "memory": 12492, "data_time": 0.11609, "loss_rpn_cls": 0.00239, "loss_rpn_bbox": 0.00833, "loss_cls": 0.04383, "acc": 98.39172, "loss_bbox": 0.06775, "loss_mask": 0.07202, "loss": 0.19432, "time": 0.81435}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00573, "bbox_mAP": 0.797, "bbox_mAP_50": 0.896, "bbox_mAP_75": 0.876, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.729, "bbox_mAP_l": 0.869, "bbox_mAP_copypaste": "0.797 0.896 0.876 0.000 0.729 0.869", "segm_mAP": 0.819, "segm_mAP_50": 0.896, "segm_mAP_75": 0.874, "segm_mAP_s": 0.0, "segm_mAP_m": 0.745, "segm_mAP_l": 0.888, "segm_mAP_copypaste": "0.819 0.896 0.874 0.000 0.745 0.888"}
{"mode": "train", "epoch": 7, "iter": 24, "lr": 0.00669, "memory": 12492, "data_time": 0.11176, "loss_rpn_cls": 0.00166, "loss_rpn_bbox": 0.0079, "loss_cls": 0.03901, "acc": 98.54838, "loss_bbox": 0.06267, "loss_mask": 0.06651, "loss": 0.17775, "time": 0.81571}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00669, "bbox_mAP": 0.769, "bbox_mAP_50": 0.907, "bbox_mAP_75": 0.907, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.757, "bbox_mAP_l": 0.814, "bbox_mAP_copypaste": "0.769 0.907 0.907 0.202 0.757 0.814", "segm_mAP": 0.828, "segm_mAP_50": 0.907, "segm_mAP_75": 0.887, "segm_mAP_s": 0.101, "segm_mAP_m": 0.741, "segm_mAP_l": 0.889, "segm_mAP_copypaste": "0.828 0.907 0.887 0.101 0.741 0.889"}
{"mode": "train", "epoch": 8, "iter": 24, "lr": 0.00765, "memory": 12492, "data_time": 0.11815, "loss_rpn_cls": 0.00169, "loss_rpn_bbox": 0.00864, "loss_cls": 0.03826, "acc": 98.4965, "loss_bbox": 0.06753, "loss_mask": 0.07075, "loss": 0.18685, "time": 0.83026}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00765, "bbox_mAP": 0.77, "bbox_mAP_50": 0.891, "bbox_mAP_75": 0.871, "bbox_mAP_s": 0.353, "bbox_mAP_m": 0.717, "bbox_mAP_l": 0.813, "bbox_mAP_copypaste": "0.770 0.891 0.871 0.353 0.717 0.813", "segm_mAP": 0.8, "segm_mAP_50": 0.868, "segm_mAP_75": 0.868, "segm_mAP_s": 0.202, "segm_mAP_m": 0.709, "segm_mAP_l": 0.844, "segm_mAP_copypaste": "0.800 0.868 0.868 0.202 0.709 0.844"}
