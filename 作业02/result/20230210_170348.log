2023-02-10 17:03:49,117 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Build cuda_11.1.TC455_06.29069683_0
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.4.1
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMDetection: 2.22.0+
------------------------------------------------------------

2023-02-10 17:03:49,408 - mmdet - INFO - Distributed training: False
2023-02-10 17:03:49,680 - mmdet - INFO - Config:
checkpoint_config = dict(interval=1)
log_config = dict(interval=24, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'mask_rcnn_r50_fpn_mstrain-poly_3x_coco_20210524_201154-21b550bb.pth'
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
dataset_type = 'CocoDataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True,
        poly2mask=False),
    dict(
        type='Resize',
        img_scale=[(1333, 640), (1333, 800)],
        multiscale_mode='range',
        keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=2,
    train=dict(
        type='RepeatDataset',
        times=3,
        dataset=dict(
            type='CocoDataset',
            ann_file='dataset/balloon/train/coco_train_ann.json',
            img_prefix='dataset/balloon/train',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(
                    type='LoadAnnotations',
                    with_bbox=True,
                    with_mask=True,
                    poly2mask=False),
                dict(
                    type='Resize',
                    img_scale=[(1333, 640), (1333, 800)],
                    multiscale_mode='range',
                    keep_ratio=True),
                dict(type='RandomFlip', flip_ratio=0.5),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='Pad', size_divisor=32),
                dict(type='DefaultFormatBundle'),
                dict(
                    type='Collect',
                    keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
            ],
            classes=('balloon', ))),
    val=dict(
        type='CocoDataset',
        ann_file='dataset/balloon/val/coco_val_ann.json',
        img_prefix='dataset/balloon/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('balloon', )),
    test=dict(
        type='CocoDataset',
        ann_file='dataset/balloon/val/coco_val_ann.json',
        img_prefix='dataset/balloon/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('balloon', )))
evaluation = dict(interval=1, metric=['bbox', 'segm'])
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[9, 11])
runner = dict(type='EpochBasedRunner', max_epochs=8)
model = dict(
    type='MaskRCNN',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='resnet50-0676ba61.pth')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=1,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=1,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
work_dir = 'work/balloon_mask_rcnn50'
auto_resume = False
gpu_ids = range(0, 1)

2023-02-10 17:03:49,681 - mmdet - INFO - Set random seed to 545555389, deterministic: False
2023-02-10 17:03:50,263 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'resnet50-0676ba61.pth'}
2023-02-10 17:03:51,718 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-02-10 17:03:51,736 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-02-10 17:03:51,740 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from resnet50-0676ba61.pth 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from resnet50-0676ba61.pth 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.mask_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.upsample.weight - torch.Size([256, 256, 2, 2]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.upsample.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  
2023-02-10 17:03:57,161 - mmdet - INFO - load checkpoint from local path: mask_rcnn_r50_fpn_mstrain-poly_3x_coco_20210524_201154-21b550bb.pth
2023-02-10 17:03:57,356 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([2, 1024]).
size mismatch for roi_head.bbox_head.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.fc_reg.weight: copying a param with shape torch.Size([320, 1024]) from checkpoint, the shape in current model is torch.Size([4, 1024]).
size mismatch for roi_head.bbox_head.fc_reg.bias: copying a param with shape torch.Size([320]) from checkpoint, the shape in current model is torch.Size([4]).
size mismatch for roi_head.mask_head.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for roi_head.mask_head.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([1]).
2023-02-10 17:03:57,358 - mmdet - INFO - Start running, host: scz0ate@g0015, work_dir: /data/run01/scz0ate/code/homework02/work/balloon_mask_rcnn50
2023-02-10 17:03:57,359 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-10 17:03:57,359 - mmdet - INFO - workflow: [('train', 1)], max: 8 epochs
2023-02-10 17:03:57,359 - mmdet - INFO - Checkpoints will be saved to /data/run01/scz0ate/code/homework02/work/balloon_mask_rcnn50 by HardDiskBackend.
2023-02-10 17:04:17,293 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:04:17,303 - mmdet - INFO - Epoch [1][24/24]	lr: 9.391e-04, eta: 0:02:18, time: 0.826, data_time: 0.121, memory: 11953, loss_rpn_cls: 0.0516, loss_rpn_bbox: 0.0168, loss_cls: 0.3986, acc: 84.7168, loss_bbox: 0.3228, loss_mask: 1.7381, loss: 2.5280
2023-02-10 17:04:17,366 - mmdet - INFO - Saving checkpoint at 1 epochs
2023-02-10 17:04:24,058 - mmdet - INFO - Evaluating bbox...
2023-02-10 17:04:24,152 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.272
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.432
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.308
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.238
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.332
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.628
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.628
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.628
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.708
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.636

2023-02-10 17:04:24,152 - mmdet - INFO - Evaluating segm...
2023-02-10 17:04:24,312 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.344
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.432
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.430
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.122
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.531
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.742
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.742
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.742
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.775
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.772

2023-02-10 17:04:24,317 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:04:24,317 - mmdet - INFO - Epoch(val) [1][13]	bbox_mAP: 0.2720, bbox_mAP_50: 0.4320, bbox_mAP_75: 0.3080, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.2380, bbox_mAP_l: 0.3320, bbox_mAP_copypaste: 0.272 0.432 0.308 0.000 0.238 0.332, segm_mAP: 0.3440, segm_mAP_50: 0.4320, segm_mAP_75: 0.4300, segm_mAP_s: 0.0000, segm_mAP_m: 0.1220, segm_mAP_l: 0.5310, segm_mAP_copypaste: 0.344 0.432 0.430 0.000 0.122 0.531
2023-02-10 17:04:43,796 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:04:43,796 - mmdet - INFO - Epoch [2][24/24]	lr: 1.898e-03, eta: 0:01:57, time: 0.807, data_time: 0.114, memory: 12424, loss_rpn_cls: 0.0246, loss_rpn_bbox: 0.0152, loss_cls: 0.1981, acc: 89.6637, loss_bbox: 0.3907, loss_mask: 0.1472, loss: 0.7758
2023-02-10 17:04:43,834 - mmdet - INFO - Saving checkpoint at 2 epochs
2023-02-10 17:04:49,129 - mmdet - INFO - Evaluating bbox...
2023-02-10 17:04:49,198 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.606
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.838
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.790
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.531
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.671
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.696
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.696
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.696
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.633
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.756

2023-02-10 17:04:49,198 - mmdet - INFO - Evaluating segm...
2023-02-10 17:04:49,291 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.735
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.830
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.830
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.724
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.782
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.833
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.853

2023-02-10 17:04:49,291 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:04:49,292 - mmdet - INFO - Epoch(val) [2][13]	bbox_mAP: 0.6060, bbox_mAP_50: 0.8380, bbox_mAP_75: 0.7900, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.5310, bbox_mAP_l: 0.6710, bbox_mAP_copypaste: 0.606 0.838 0.790 0.000 0.531 0.671, segm_mAP: 0.7350, segm_mAP_50: 0.8300, segm_mAP_75: 0.8300, segm_mAP_s: 0.0000, segm_mAP_m: 0.7240, segm_mAP_l: 0.7820, segm_mAP_copypaste: 0.735 0.830 0.830 0.000 0.724 0.782
2023-02-10 17:05:09,244 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:05:09,244 - mmdet - INFO - Epoch [3][24/24]	lr: 2.857e-03, eta: 0:01:38, time: 0.826, data_time: 0.115, memory: 12424, loss_rpn_cls: 0.0112, loss_rpn_bbox: 0.0112, loss_cls: 0.0994, acc: 96.3603, loss_bbox: 0.2464, loss_mask: 0.1129, loss: 0.4810
2023-02-10 17:05:09,284 - mmdet - INFO - Saving checkpoint at 3 epochs
2023-02-10 17:05:11,603 - mmdet - INFO - Evaluating bbox...
2023-02-10 17:05:11,632 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.664
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.888
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.811
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.177
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.618
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.712
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.720
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.720
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.720
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.350
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.658
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.761

2023-02-10 17:05:11,632 - mmdet - INFO - Evaluating segm...
2023-02-10 17:05:11,666 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.769
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.876
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.876
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.058
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.731
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.813
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.824
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.824
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.824
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.783
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.861

2023-02-10 17:05:11,666 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:05:11,667 - mmdet - INFO - Epoch(val) [3][13]	bbox_mAP: 0.6640, bbox_mAP_50: 0.8880, bbox_mAP_75: 0.8110, bbox_mAP_s: 0.1770, bbox_mAP_m: 0.6180, bbox_mAP_l: 0.7120, bbox_mAP_copypaste: 0.664 0.888 0.811 0.177 0.618 0.712, segm_mAP: 0.7690, segm_mAP_50: 0.8760, segm_mAP_75: 0.8760, segm_mAP_s: 0.0580, segm_mAP_m: 0.7310, segm_mAP_l: 0.8130, segm_mAP_copypaste: 0.769 0.876 0.876 0.058 0.731 0.813
2023-02-10 17:05:31,340 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:05:31,341 - mmdet - INFO - Epoch [4][24/24]	lr: 3.816e-03, eta: 0:01:18, time: 0.815, data_time: 0.114, memory: 12424, loss_rpn_cls: 0.0067, loss_rpn_bbox: 0.0101, loss_cls: 0.0707, acc: 97.3094, loss_bbox: 0.1066, loss_mask: 0.0934, loss: 0.2875
2023-02-10 17:05:31,380 - mmdet - INFO - Saving checkpoint at 4 epochs
2023-02-10 17:05:33,203 - mmdet - INFO - Evaluating bbox...
2023-02-10 17:05:33,225 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.781
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.900
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.900
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.404
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.761
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.825
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.830
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.830
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.830
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.864

2023-02-10 17:05:33,225 - mmdet - INFO - Evaluating segm...
2023-02-10 17:05:33,250 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.812
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.900
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.883
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.101
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.740
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.867
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.850
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.850
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.850
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.894

2023-02-10 17:05:33,251 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:05:33,251 - mmdet - INFO - Epoch(val) [4][13]	bbox_mAP: 0.7810, bbox_mAP_50: 0.9000, bbox_mAP_75: 0.9000, bbox_mAP_s: 0.4040, bbox_mAP_m: 0.7610, bbox_mAP_l: 0.8250, bbox_mAP_copypaste: 0.781 0.900 0.900 0.404 0.761 0.825, segm_mAP: 0.8120, segm_mAP_50: 0.9000, segm_mAP_75: 0.8830, segm_mAP_s: 0.1010, segm_mAP_m: 0.7400, segm_mAP_l: 0.8670, segm_mAP_copypaste: 0.812 0.900 0.883 0.101 0.740 0.867
2023-02-10 17:05:53,150 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:05:53,150 - mmdet - INFO - Epoch [5][24/24]	lr: 4.775e-03, eta: 0:00:59, time: 0.824, data_time: 0.119, memory: 12424, loss_rpn_cls: 0.0037, loss_rpn_bbox: 0.0081, loss_cls: 0.0527, acc: 98.0164, loss_bbox: 0.0767, loss_mask: 0.0791, loss: 0.2203
2023-02-10 17:05:53,193 - mmdet - INFO - Saving checkpoint at 5 epochs
2023-02-10 17:05:55,114 - mmdet - INFO - Evaluating bbox...
2023-02-10 17:05:55,138 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.779
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.905
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.873
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.404
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.758
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.823
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.818
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.818
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.818
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.775
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.856

2023-02-10 17:05:55,138 - mmdet - INFO - Evaluating segm...
2023-02-10 17:05:55,165 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.822
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.891
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.891
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.219
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.758
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.873
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.854
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.854
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.854
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.450
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.897

2023-02-10 17:05:55,165 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:05:55,166 - mmdet - INFO - Epoch(val) [5][13]	bbox_mAP: 0.7790, bbox_mAP_50: 0.9050, bbox_mAP_75: 0.8730, bbox_mAP_s: 0.4040, bbox_mAP_m: 0.7580, bbox_mAP_l: 0.8230, bbox_mAP_copypaste: 0.779 0.905 0.873 0.404 0.758 0.823, segm_mAP: 0.8220, segm_mAP_50: 0.8910, segm_mAP_75: 0.8910, segm_mAP_s: 0.2190, segm_mAP_m: 0.7580, segm_mAP_l: 0.8730, segm_mAP_copypaste: 0.822 0.891 0.891 0.219 0.758 0.873
2023-02-10 17:06:14,823 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:06:14,824 - mmdet - INFO - Epoch [6][24/24]	lr: 5.734e-03, eta: 0:00:39, time: 0.814, data_time: 0.116, memory: 12492, loss_rpn_cls: 0.0024, loss_rpn_bbox: 0.0083, loss_cls: 0.0438, acc: 98.3917, loss_bbox: 0.0677, loss_mask: 0.0720, loss: 0.1943
2023-02-10 17:06:14,860 - mmdet - INFO - Saving checkpoint at 6 epochs
2023-02-10 17:06:16,544 - mmdet - INFO - Evaluating bbox...
2023-02-10 17:06:16,564 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.797
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.896
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.876
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.729
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.869
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.824
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.824
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.824
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.750
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.894

2023-02-10 17:06:16,564 - mmdet - INFO - Evaluating segm...
2023-02-10 17:06:16,586 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.819
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.896
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.874
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.745
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.888
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.848
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.848
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.848
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.914

2023-02-10 17:06:16,587 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:06:16,587 - mmdet - INFO - Epoch(val) [6][13]	bbox_mAP: 0.7970, bbox_mAP_50: 0.8960, bbox_mAP_75: 0.8760, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.7290, bbox_mAP_l: 0.8690, bbox_mAP_copypaste: 0.797 0.896 0.876 0.000 0.729 0.869, segm_mAP: 0.8190, segm_mAP_50: 0.8960, segm_mAP_75: 0.8740, segm_mAP_s: 0.0000, segm_mAP_m: 0.7450, segm_mAP_l: 0.8880, segm_mAP_copypaste: 0.819 0.896 0.874 0.000 0.745 0.888
2023-02-10 17:06:36,269 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:06:36,270 - mmdet - INFO - Epoch [7][24/24]	lr: 6.693e-03, eta: 0:00:19, time: 0.816, data_time: 0.112, memory: 12492, loss_rpn_cls: 0.0017, loss_rpn_bbox: 0.0079, loss_cls: 0.0390, acc: 98.5484, loss_bbox: 0.0627, loss_mask: 0.0665, loss: 0.1777
2023-02-10 17:06:36,305 - mmdet - INFO - Saving checkpoint at 7 epochs
2023-02-10 17:06:37,964 - mmdet - INFO - Evaluating bbox...
2023-02-10 17:06:37,986 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.769
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.907
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.907
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.202
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.757
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.808
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.808
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.808
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.783
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.839

2023-02-10 17:06:37,986 - mmdet - INFO - Evaluating segm...
2023-02-10 17:06:38,008 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.828
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.907
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.887
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.101
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.741
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.889
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.866
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.866
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.866
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.792
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.917

2023-02-10 17:06:38,009 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:06:38,009 - mmdet - INFO - Epoch(val) [7][13]	bbox_mAP: 0.7690, bbox_mAP_50: 0.9070, bbox_mAP_75: 0.9070, bbox_mAP_s: 0.2020, bbox_mAP_m: 0.7570, bbox_mAP_l: 0.8140, bbox_mAP_copypaste: 0.769 0.907 0.907 0.202 0.757 0.814, segm_mAP: 0.8280, segm_mAP_50: 0.9070, segm_mAP_75: 0.8870, segm_mAP_s: 0.1010, segm_mAP_m: 0.7410, segm_mAP_l: 0.8890, segm_mAP_copypaste: 0.828 0.907 0.887 0.101 0.741 0.889
2023-02-10 17:06:58,046 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:06:58,047 - mmdet - INFO - Epoch [8][24/24]	lr: 7.652e-03, eta: 0:00:00, time: 0.830, data_time: 0.118, memory: 12492, loss_rpn_cls: 0.0017, loss_rpn_bbox: 0.0086, loss_cls: 0.0383, acc: 98.4965, loss_bbox: 0.0675, loss_mask: 0.0707, loss: 0.1869
2023-02-10 17:06:58,082 - mmdet - INFO - Saving checkpoint at 8 epochs
2023-02-10 17:06:59,723 - mmdet - INFO - Evaluating bbox...
2023-02-10 17:06:59,742 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.770
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.891
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.871
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.353
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.717
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.813
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.818
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.818
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.818
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.350
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.775
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.858

2023-02-10 17:06:59,742 - mmdet - INFO - Evaluating segm...
2023-02-10 17:06:59,765 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.800
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.868
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.868
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.202
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.709
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.844
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.842
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.842
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.842
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.881

2023-02-10 17:06:59,765 - mmdet - INFO - Exp name: mask_rcnn_r50_test_coco.py
2023-02-10 17:06:59,765 - mmdet - INFO - Epoch(val) [8][13]	bbox_mAP: 0.7700, bbox_mAP_50: 0.8910, bbox_mAP_75: 0.8710, bbox_mAP_s: 0.3530, bbox_mAP_m: 0.7170, bbox_mAP_l: 0.8130, bbox_mAP_copypaste: 0.770 0.891 0.871 0.353 0.717 0.813, segm_mAP: 0.8000, segm_mAP_50: 0.8680, segm_mAP_75: 0.8680, segm_mAP_s: 0.2020, segm_mAP_m: 0.7090, segm_mAP_l: 0.8440, segm_mAP_copypaste: 0.800 0.868 0.868 0.202 0.709 0.844
