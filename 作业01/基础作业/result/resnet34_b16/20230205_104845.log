2023-02-05 10:48:46,041 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-05 10:48:46,042 - mmcls - INFO - Distributed training: True
2023-02-05 10:48:46,141 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=34,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower_dataset/train.txt',
        classes='data/flower_dataset/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/val',
        ann_file='data/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower_dataset/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(
    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/HOME/scz0ate/run/code/mmclassification/checkpoints/resnet34_batch256_imagenet_20200708-32ffb4f7.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work/resnet34_b32_flower'
gpu_ids = range(0, 2)

2023-02-05 10:48:56,918 - mmcls - INFO - Set random seed to 1365799251, deterministic: False
2023-02-05 10:48:57,201 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-05 10:48:57,379 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 10:48:57,833 - mmcls - INFO - load checkpoint from local path: /HOME/scz0ate/run/code/mmclassification/checkpoints/resnet34_batch256_imagenet_20200708-32ffb4f7.pth
2023-02-05 10:48:58,055 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 10:48:58,055 - mmcls - INFO - Start running, host: scz0ate@g0073, work_dir: /data/run01/scz0ate/code/mmclassification/work/resnet34_b32_flower
2023-02-05 10:48:58,055 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) DistOptimizerHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 10:48:58,055 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 10:48:58,055 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0ate/code/mmclassification/work/resnet34_b32_flower by HardDiskBackend.
2023-02-05 10:49:15,340 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 10:49:19,625 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 93.3099
2023-02-05 10:49:23,506 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 10:49:26,267 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 94.1901
2023-02-05 10:49:30,152 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 10:49:32,928 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 95.0704
2023-02-05 10:49:36,830 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 10:49:39,588 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 94.8944
2023-02-05 10:49:43,491 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 10:49:46,263 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 94.8944
2023-02-05 10:49:50,153 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 10:49:52,935 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 94.8944
2023-02-05 10:49:56,831 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 10:49:59,607 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 95.5986
2023-02-05 10:50:03,499 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 10:50:06,275 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 95.2465
2023-02-05 10:50:10,181 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 10:50:12,952 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 95.5986
2023-02-05 10:50:16,844 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 10:50:19,623 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 95.7747
2023-02-05 10:50:23,514 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 10:50:26,284 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 95.4225
2023-02-05 10:50:30,159 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 10:50:32,954 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 95.7747
2023-02-05 10:50:36,828 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 10:50:39,593 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 95.5986
2023-02-05 10:50:43,482 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 10:50:46,290 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 95.9507
2023-02-05 10:50:50,168 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 10:50:52,943 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 95.9507
2023-02-05 10:50:56,808 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 10:50:59,603 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 96.3028
2023-02-05 10:51:03,473 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 10:51:06,239 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 96.3028
2023-02-05 10:51:10,115 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 10:51:12,893 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 96.1268
2023-02-05 10:51:16,767 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 10:51:19,541 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 96.1268
2023-02-05 10:51:23,420 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 10:51:26,199 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 96.3028
2023-02-05 10:51:30,071 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 10:51:32,833 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 96.4789
2023-02-05 10:51:36,710 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 10:51:39,492 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 96.3028
2023-02-05 10:51:43,371 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 10:51:46,143 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 96.4789
2023-02-05 10:51:50,020 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 10:51:52,795 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 96.4789
2023-02-05 10:51:56,671 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 10:51:59,427 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 96.3028
2023-02-05 10:52:03,304 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 10:52:06,092 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 96.4789
2023-02-05 10:52:09,963 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 10:52:12,727 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 96.3028
2023-02-05 10:52:16,606 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 10:52:19,381 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 96.1268
2023-02-05 10:52:23,264 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 10:52:26,042 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 96.8310
2023-02-05 10:52:29,926 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 10:52:32,686 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 96.8310
2023-02-05 10:52:36,573 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 10:52:39,349 - mmcls - INFO - Epoch(val) [31][9]	accuracy_top-1: 96.4789
2023-02-05 10:52:43,239 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 10:52:45,998 - mmcls - INFO - Epoch(val) [32][9]	accuracy_top-1: 96.4789
2023-02-05 10:52:49,881 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 10:52:52,646 - mmcls - INFO - Epoch(val) [33][9]	accuracy_top-1: 96.4789
2023-02-05 10:52:56,526 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 10:52:59,285 - mmcls - INFO - Epoch(val) [34][9]	accuracy_top-1: 96.6549
2023-02-05 10:53:03,160 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 10:53:05,921 - mmcls - INFO - Epoch(val) [35][9]	accuracy_top-1: 96.6549
2023-02-05 10:53:09,796 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 10:53:12,562 - mmcls - INFO - Epoch(val) [36][9]	accuracy_top-1: 96.1268
2023-02-05 10:53:16,425 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 10:53:19,194 - mmcls - INFO - Epoch(val) [37][9]	accuracy_top-1: 96.8310
2023-02-05 10:53:23,057 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 10:53:25,828 - mmcls - INFO - Epoch(val) [38][9]	accuracy_top-1: 97.0070
2023-02-05 10:53:29,707 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 10:53:32,463 - mmcls - INFO - Epoch(val) [39][9]	accuracy_top-1: 96.8310
2023-02-05 10:53:36,344 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 10:53:39,123 - mmcls - INFO - Epoch(val) [40][9]	accuracy_top-1: 97.0070
2023-02-05 10:53:42,997 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 10:53:45,761 - mmcls - INFO - Epoch(val) [41][9]	accuracy_top-1: 96.8310
2023-02-05 10:53:49,642 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 10:53:52,402 - mmcls - INFO - Epoch(val) [42][9]	accuracy_top-1: 96.8310
2023-02-05 10:53:56,270 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 10:53:59,030 - mmcls - INFO - Epoch(val) [43][9]	accuracy_top-1: 97.3592
2023-02-05 10:54:02,905 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 10:54:05,667 - mmcls - INFO - Epoch(val) [44][9]	accuracy_top-1: 96.6549
2023-02-05 10:54:09,557 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 10:54:12,315 - mmcls - INFO - Epoch(val) [45][9]	accuracy_top-1: 96.8310
2023-02-05 10:54:16,184 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 10:54:18,952 - mmcls - INFO - Epoch(val) [46][9]	accuracy_top-1: 96.8310
2023-02-05 10:54:22,828 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 10:54:25,585 - mmcls - INFO - Epoch(val) [47][9]	accuracy_top-1: 96.3028
2023-02-05 10:54:29,455 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 10:54:32,227 - mmcls - INFO - Epoch(val) [48][9]	accuracy_top-1: 96.8310
2023-02-05 10:54:36,094 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 10:54:38,855 - mmcls - INFO - Epoch(val) [49][9]	accuracy_top-1: 96.8310
2023-02-05 10:54:42,738 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 10:54:45,497 - mmcls - INFO - Epoch(val) [50][9]	accuracy_top-1: 96.8310
2023-02-05 10:54:49,380 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 10:54:52,175 - mmcls - INFO - Epoch(val) [51][9]	accuracy_top-1: 97.0070
2023-02-05 10:54:56,052 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 10:54:58,819 - mmcls - INFO - Epoch(val) [52][9]	accuracy_top-1: 97.0070
2023-02-05 10:55:02,693 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 10:55:05,451 - mmcls - INFO - Epoch(val) [53][9]	accuracy_top-1: 96.6549
2023-02-05 10:55:09,334 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 10:55:12,091 - mmcls - INFO - Epoch(val) [54][9]	accuracy_top-1: 97.5352
2023-02-05 10:55:15,965 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 10:55:18,723 - mmcls - INFO - Epoch(val) [55][9]	accuracy_top-1: 97.1831
2023-02-05 10:55:22,593 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 10:55:25,349 - mmcls - INFO - Epoch(val) [56][9]	accuracy_top-1: 96.6549
2023-02-05 10:55:29,227 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 10:55:31,986 - mmcls - INFO - Epoch(val) [57][9]	accuracy_top-1: 96.8310
2023-02-05 10:55:35,868 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 10:55:38,629 - mmcls - INFO - Epoch(val) [58][9]	accuracy_top-1: 97.5352
2023-02-05 10:55:42,505 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 10:55:45,262 - mmcls - INFO - Epoch(val) [59][9]	accuracy_top-1: 96.6549
2023-02-05 10:55:49,135 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 10:55:51,900 - mmcls - INFO - Epoch(val) [60][9]	accuracy_top-1: 97.1831
2023-02-05 10:55:55,783 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 10:55:58,547 - mmcls - INFO - Epoch(val) [61][9]	accuracy_top-1: 96.8310
2023-02-05 10:56:02,421 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 10:56:05,181 - mmcls - INFO - Epoch(val) [62][9]	accuracy_top-1: 97.7113
2023-02-05 10:56:09,059 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 10:56:11,814 - mmcls - INFO - Epoch(val) [63][9]	accuracy_top-1: 97.0070
2023-02-05 10:56:15,695 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 10:56:18,455 - mmcls - INFO - Epoch(val) [64][9]	accuracy_top-1: 96.6549
2023-02-05 10:56:22,340 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 10:56:25,100 - mmcls - INFO - Epoch(val) [65][9]	accuracy_top-1: 96.8310
2023-02-05 10:56:28,969 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 10:56:31,733 - mmcls - INFO - Epoch(val) [66][9]	accuracy_top-1: 97.5352
2023-02-05 10:56:35,611 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 10:56:38,370 - mmcls - INFO - Epoch(val) [67][9]	accuracy_top-1: 97.1831
2023-02-05 10:56:42,250 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 10:56:45,008 - mmcls - INFO - Epoch(val) [68][9]	accuracy_top-1: 97.5352
2023-02-05 10:56:48,874 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 10:56:51,633 - mmcls - INFO - Epoch(val) [69][9]	accuracy_top-1: 97.3592
2023-02-05 10:56:55,507 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 10:56:58,269 - mmcls - INFO - Epoch(val) [70][9]	accuracy_top-1: 96.8310
2023-02-05 10:57:02,130 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 10:57:04,885 - mmcls - INFO - Epoch(val) [71][9]	accuracy_top-1: 97.1831
2023-02-05 10:57:08,768 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 10:57:11,528 - mmcls - INFO - Epoch(val) [72][9]	accuracy_top-1: 97.1831
2023-02-05 10:57:15,429 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 10:57:18,189 - mmcls - INFO - Epoch(val) [73][9]	accuracy_top-1: 96.6549
2023-02-05 10:57:22,068 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 10:57:24,869 - mmcls - INFO - Epoch(val) [74][9]	accuracy_top-1: 97.5352
2023-02-05 10:57:28,753 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 10:57:31,510 - mmcls - INFO - Epoch(val) [75][9]	accuracy_top-1: 97.1831
2023-02-05 10:57:35,377 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 10:57:38,138 - mmcls - INFO - Epoch(val) [76][9]	accuracy_top-1: 96.8310
2023-02-05 10:57:42,000 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 10:57:44,774 - mmcls - INFO - Epoch(val) [77][9]	accuracy_top-1: 96.6549
2023-02-05 10:57:48,655 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 10:57:51,426 - mmcls - INFO - Epoch(val) [78][9]	accuracy_top-1: 96.6549
2023-02-05 10:57:55,310 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 10:57:58,073 - mmcls - INFO - Epoch(val) [79][9]	accuracy_top-1: 96.8310
2023-02-05 10:58:01,946 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 10:58:04,714 - mmcls - INFO - Epoch(val) [80][9]	accuracy_top-1: 96.8310
2023-02-05 10:58:08,596 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 10:58:11,356 - mmcls - INFO - Epoch(val) [81][9]	accuracy_top-1: 96.6549
2023-02-05 10:58:15,224 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 10:58:17,986 - mmcls - INFO - Epoch(val) [82][9]	accuracy_top-1: 96.3028
2023-02-05 10:58:21,867 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 10:58:24,624 - mmcls - INFO - Epoch(val) [83][9]	accuracy_top-1: 96.8310
2023-02-05 10:58:28,505 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 10:58:31,265 - mmcls - INFO - Epoch(val) [84][9]	accuracy_top-1: 95.9507
2023-02-05 10:58:35,157 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 10:58:37,915 - mmcls - INFO - Epoch(val) [85][9]	accuracy_top-1: 97.5352
2023-02-05 10:58:41,803 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 10:58:44,567 - mmcls - INFO - Epoch(val) [86][9]	accuracy_top-1: 96.3028
2023-02-05 10:58:48,451 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 10:58:51,214 - mmcls - INFO - Epoch(val) [87][9]	accuracy_top-1: 96.8310
2023-02-05 10:58:55,092 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 10:58:57,869 - mmcls - INFO - Epoch(val) [88][9]	accuracy_top-1: 97.1831
2023-02-05 10:59:01,749 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 10:59:04,519 - mmcls - INFO - Epoch(val) [89][9]	accuracy_top-1: 96.6549
2023-02-05 10:59:08,404 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 10:59:11,166 - mmcls - INFO - Epoch(val) [90][9]	accuracy_top-1: 96.8310
2023-02-05 10:59:15,039 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 10:59:17,800 - mmcls - INFO - Epoch(val) [91][9]	accuracy_top-1: 96.8310
2023-02-05 10:59:21,677 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 10:59:24,438 - mmcls - INFO - Epoch(val) [92][9]	accuracy_top-1: 97.1831
2023-02-05 10:59:28,311 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 10:59:31,070 - mmcls - INFO - Epoch(val) [93][9]	accuracy_top-1: 96.8310
2023-02-05 10:59:34,953 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 10:59:37,736 - mmcls - INFO - Epoch(val) [94][9]	accuracy_top-1: 97.3592
2023-02-05 10:59:41,618 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 10:59:44,372 - mmcls - INFO - Epoch(val) [95][9]	accuracy_top-1: 97.5352
2023-02-05 10:59:48,252 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 10:59:51,037 - mmcls - INFO - Epoch(val) [96][9]	accuracy_top-1: 97.3592
2023-02-05 10:59:54,905 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 10:59:57,654 - mmcls - INFO - Epoch(val) [97][9]	accuracy_top-1: 97.5352
2023-02-05 11:00:01,519 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 11:00:04,278 - mmcls - INFO - Epoch(val) [98][9]	accuracy_top-1: 97.3592
2023-02-05 11:00:08,150 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 11:00:10,904 - mmcls - INFO - Epoch(val) [99][9]	accuracy_top-1: 96.6549
2023-02-05 11:00:14,781 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 11:00:17,537 - mmcls - INFO - Epoch(val) [100][9]	accuracy_top-1: 97.3592
